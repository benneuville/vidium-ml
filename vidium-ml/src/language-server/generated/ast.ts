/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Asset = AssetItem | Layer;

export const Asset = 'Asset';

export function isAsset(item: unknown): item is Asset {
    return reflection.isInstance(item, Asset);
}

export interface AssetItem extends AstNode {
    readonly $container: Video;
    readonly $type: 'AssetItem';
    assetItem: Clip | Rectangle
    name: string
    pos_x: number
    pos_y: number
}

export const AssetItem = 'AssetItem';

export function isAssetItem(item: unknown): item is AssetItem {
    return reflection.isInstance(item, AssetItem);
}

export interface Clip extends AstNode {
    readonly $container: AssetItem;
    readonly $type: 'Clip';
    from: number
    path: string
    to: number
}

export const Clip = 'Clip';

export function isClip(item: unknown): item is Clip {
    return reflection.isInstance(item, Clip);
}

export interface Layer extends AstNode {
    readonly $container: Video;
    readonly $type: 'Layer';
    composition: Array<Reference<Asset>>
    name: string
    timeSpan: TimeSpan
}

export const Layer = 'Layer';

export function isLayer(item: unknown): item is Layer {
    return reflection.isInstance(item, Layer);
}

export interface Rectangle extends AstNode {
    readonly $container: AssetItem;
    readonly $type: 'Rectangle';
    color: string
    height: number
    width: number
}

export const Rectangle = 'Rectangle';

export function isRectangle(item: unknown): item is Rectangle {
    return reflection.isInstance(item, Rectangle);
}

export interface Sequence extends AstNode {
    readonly $container: Video;
    readonly $type: 'Sequence';
    composition: Array<Reference<Asset>>
    duration: number
    name: string
}

export const Sequence = 'Sequence';

export function isSequence(item: unknown): item is Sequence {
    return reflection.isInstance(item, Sequence);
}

export interface TimeLine extends AstNode {
    readonly $container: Video;
    readonly $type: 'TimeLine';
    composition: Array<Reference<Sequence>>
    name: string
}

export const TimeLine = 'TimeLine';

export function isTimeLine(item: unknown): item is TimeLine {
    return reflection.isInstance(item, TimeLine);
}

export interface TimeSpan extends AstNode {
    readonly $container: Layer;
    readonly $type: 'TimeSpan';
    duration: number
    offset?: number
}

export const TimeSpan = 'TimeSpan';

export function isTimeSpan(item: unknown): item is TimeSpan {
    return reflection.isInstance(item, TimeSpan);
}

export interface Video extends AstNode {
    readonly $type: 'Video';
    assets: Array<AssetItem>
    layers: Array<Layer>
    name: string
    sequences: Array<Sequence>
    timelines: Array<TimeLine>
}

export const Video = 'Video';

export function isVideo(item: unknown): item is Video {
    return reflection.isInstance(item, Video);
}

export interface VidiumMlAstType {
    Asset: Asset
    AssetItem: AssetItem
    Clip: Clip
    Layer: Layer
    Rectangle: Rectangle
    Sequence: Sequence
    TimeLine: TimeLine
    TimeSpan: TimeSpan
    Video: Video
}

export class VidiumMlAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Asset', 'AssetItem', 'Clip', 'Layer', 'Rectangle', 'Sequence', 'TimeLine', 'TimeSpan', 'Video'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case AssetItem:
            case Layer: {
                return this.isSubtype(Asset, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Layer:composition':
            case 'Sequence:composition': {
                return Asset;
            }
            case 'TimeLine:composition': {
                return Sequence;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Layer': {
                return {
                    name: 'Layer',
                    mandatory: [
                        { name: 'composition', type: 'array' }
                    ]
                };
            }
            case 'Sequence': {
                return {
                    name: 'Sequence',
                    mandatory: [
                        { name: 'composition', type: 'array' }
                    ]
                };
            }
            case 'TimeLine': {
                return {
                    name: 'TimeLine',
                    mandatory: [
                        { name: 'composition', type: 'array' }
                    ]
                };
            }
            case 'Video': {
                return {
                    name: 'Video',
                    mandatory: [
                        { name: 'assets', type: 'array' },
                        { name: 'layers', type: 'array' },
                        { name: 'sequences', type: 'array' },
                        { name: 'timelines', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new VidiumMlAstReflection();
