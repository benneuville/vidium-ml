/******************************************************************************
 * This file was generated by langium-cli 1.0.0.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

/* eslint-disable */
import { AstNode, AbstractAstReflection, Reference, ReferenceInfo, TypeMetaData } from 'langium';

export type Asset = AssetItem | DefineAsset | UseAsset;

export const Asset = 'Asset';

export function isAsset(item: unknown): item is Asset {
    return reflection.isInstance(item, Asset);
}

export type AssetElement = Asset | AssetComposition;

export const AssetElement = 'AssetElement';

export function isAssetElement(item: unknown): item is AssetElement {
    return reflection.isInstance(item, AssetElement);
}

export type AssetItem = Audio | Clip | Image | Subtitle | Text | Transition;

export const AssetItem = 'AssetItem';

export function isAssetItem(item: unknown): item is AssetItem {
    return reflection.isInstance(item, AssetItem);
}

export interface AssetComposition extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'AssetComposition';
    left: AssetElement
    right: AssetElement
}

export const AssetComposition = 'AssetComposition';

export function isAssetComposition(item: unknown): item is AssetComposition {
    return reflection.isInstance(item, AssetComposition);
}

export interface Audio extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'Audio';
    duration?: number
    from?: number
    path: string
    reference?: Reference<DefineAsset>
    to?: number
}

export const Audio = 'Audio';

export function isAudio(item: unknown): item is Audio {
    return reflection.isInstance(item, Audio);
}

export interface Clip extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'Clip';
    coor_x?: number
    coor_y?: number
    duration?: number
    from?: number
    opacity?: number
    path: string
    position?: string
    reference?: Reference<DefineAsset>
    rotate?: number
    scale?: number
    scale_x?: number
    scale_y?: number
    to?: number
}

export const Clip = 'Clip';

export function isClip(item: unknown): item is Clip {
    return reflection.isInstance(item, Clip);
}

export interface DefineAsset extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'DefineAsset';
    item: AssetItem
    name: string
}

export const DefineAsset = 'DefineAsset';

export function isDefineAsset(item: unknown): item is DefineAsset {
    return reflection.isInstance(item, DefineAsset);
}

export interface Image extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'Image';
    coor_x?: number
    coor_y?: number
    duration?: number
    from?: number
    opacity?: number
    path: string
    position?: string
    reference?: Reference<DefineAsset>
    rotate?: number
    scale?: number
    scale_x?: number
    scale_y?: number
    to?: number
}

export const Image = 'Image';

export function isImage(item: unknown): item is Image {
    return reflection.isInstance(item, Image);
}

export interface Subtitle extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'Subtitle';
    color?: string
    coor_x?: number
    coor_y?: number
    duration?: number
    from?: number
    opacity?: number
    position?: string
    reference?: Reference<DefineAsset>
    scale?: number
    scale_x?: number
    scale_y?: number
    size?: number
    text: string
    to?: number
}

export const Subtitle = 'Subtitle';

export function isSubtitle(item: unknown): item is Subtitle {
    return reflection.isInstance(item, Subtitle);
}

export interface Text extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'Text';
    color?: string
    coor_x?: number
    coor_y?: number
    duration?: number
    from?: number
    opacity?: number
    position?: string
    reference?: Reference<DefineAsset>
    rotate?: number
    scale?: number
    scale_x?: number
    scale_y?: number
    size?: number
    text: string
    to?: number
}

export const Text = 'Text';

export function isText(item: unknown): item is Text {
    return reflection.isInstance(item, Text);
}

export interface Transition extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'Transition';
    duration?: number
    from?: number
    reference?: Reference<DefineAsset>
    to?: number
    type: string
}

export const Transition = 'Transition';

export function isTransition(item: unknown): item is Transition {
    return reflection.isInstance(item, Transition);
}

export interface UseAsset extends AstNode {
    readonly $container: AssetComposition | DefineAsset | Video;
    readonly $type: 'UseAsset';
    color?: string
    coor_x?: number
    coor_y?: number
    duration?: number
    from?: number
    opacity?: number
    position?: string
    reference: Reference<DefineAsset>
    rotate?: number
    scale?: number
    scale_x?: number
    scale_y?: number
    size?: number
    to?: number
}

export const UseAsset = 'UseAsset';

export function isUseAsset(item: unknown): item is UseAsset {
    return reflection.isInstance(item, UseAsset);
}

export interface Video extends AstNode {
    readonly $type: 'Video';
    elements: Array<AssetElement>
    name: string
}

export const Video = 'Video';

export function isVideo(item: unknown): item is Video {
    return reflection.isInstance(item, Video);
}

export interface VidiumMlAstType {
    Asset: Asset
    AssetComposition: AssetComposition
    AssetElement: AssetElement
    AssetItem: AssetItem
    Audio: Audio
    Clip: Clip
    DefineAsset: DefineAsset
    Image: Image
    Subtitle: Subtitle
    Text: Text
    Transition: Transition
    UseAsset: UseAsset
    Video: Video
}

export class VidiumMlAstReflection extends AbstractAstReflection {

    getAllTypes(): string[] {
        return ['Asset', 'AssetComposition', 'AssetElement', 'AssetItem', 'Audio', 'Clip', 'DefineAsset', 'Image', 'Subtitle', 'Text', 'Transition', 'UseAsset', 'Video'];
    }

    protected override computeIsSubtype(subtype: string, supertype: string): boolean {
        switch (subtype) {
            case AssetComposition:
            case Asset: {
                return this.isSubtype(AssetElement, supertype);
            }
            case Audio:
            case Clip:
            case Image:
            case Subtitle:
            case Text:
            case Transition: {
                return this.isSubtype(AssetItem, supertype);
            }
            case DefineAsset:
            case UseAsset:
            case AssetItem: {
                return this.isSubtype(Asset, supertype);
            }
            default: {
                return false;
            }
        }
    }

    getReferenceType(refInfo: ReferenceInfo): string {
        const referenceId = `${refInfo.container.$type}:${refInfo.property}`;
        switch (referenceId) {
            case 'Audio:reference':
            case 'Clip:reference':
            case 'Image:reference':
            case 'Subtitle:reference':
            case 'Text:reference':
            case 'Transition:reference':
            case 'UseAsset:reference': {
                return DefineAsset;
            }
            default: {
                throw new Error(`${referenceId} is not a valid reference id.`);
            }
        }
    }

    getTypeMetaData(type: string): TypeMetaData {
        switch (type) {
            case 'Video': {
                return {
                    name: 'Video',
                    mandatory: [
                        { name: 'elements', type: 'array' }
                    ]
                };
            }
            default: {
                return {
                    name: type,
                    mandatory: []
                };
            }
        }
    }
}

export const reflection = new VidiumMlAstReflection();
